@code {
    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }
    public Exam data = new Exam();
    HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder().WithUrl($"{nav.BaseUri}hubs/applicationHub").WithAutomaticReconnect().Build();
            if (hubConnection.State != HubConnectionState.Connected) await hubConnection.StartAsync();
        }
        catch (Exception) { }
        data = new Exam();
        data.ExamQuestions = new List<ExamQuestion>();
    }
    bool IsSaving = false;
    async Task Submit()
    {
        IsSaving = true;
        StateHasChanged();
        data.DateStart = _dateRange.Start.Value;
        data.DateEnd = _dateRange.End.Value;
        var d = await http.PostAsJsonAsync<Exam>($"api/AddExam", data);
        if (d.IsSuccessStatusCode)
        {
            var rs = await d.Content.ReadFromJsonAsync<Exam>();
            if (rs != null && !string.IsNullOrEmpty(rs.Id.ToString()))
            {
                await Task.Delay(1000);
                snackbar.Add("New exam added.");
                try
                {
                    await hubConnection.SendAsync("NotifyExamPage");
                }
                catch (Exception) { }
                _mudDialog.Close(DialogResult.Ok(rs));
                IsSaving = false;
                StateHasChanged();
            }
        }

    }
    void Cancel() => _mudDialog.Close(DialogResult.Cancel());
    MudDateRangePicker _picker;
    DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(7).Date);
}

<MudDialog>
    <DialogContent>
        <div class="row">
            <div class="col-xl-12">
                <MudTextField Class="mb-3" Lines="3" Label="Exam Name" @bind-Value="@data.ExamName" Disabled="IsSaving" Immediate Variant="Variant.Outlined" Required />
            </div>
            <div class="col-xl-12">
                <MudDateRangePicker  Class="mb-3" InputVariant="Variant.Text" Required @ref="_picker" Label="Schadule (Start and End)" @bind-DateRange="_dateRange">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudDateRangePicker>
            </div>
            <div class="col-xl-7">
                <MudTextField Class="mb-3" InputType="InputType.Number" Label="Duration in minutes" @bind-Value="@data.MinutesDuration" Disabled="IsSaving" Immediate Variant="Variant.Outlined" Required />
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="IsSaving" Size="Size.Small" OnClick="Cancel" Color="Color.Default" StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled">
            Cancel
        </MudButton>
        <MudButton Disabled="IsSaving" Size="Size.Small" OnClick="Submit" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>